@page "/events/{categoryname?}"
@using EventHub.Utilities
@rendermode InteractiveServer

<div class="jumbotron jumbotron-@CategoryName-event pt-5">
    <div class="container-fluid d-flex justify-content-center">
        <h2 class="display-5 text-white bg-danger px-2 rounded-3" style="width:fit-content">
            <strong style="font-weight:600;">@(($"{CategoryName} EVENTS").ToUpper())</strong>
        </h2>
    </div>
</div>

<div class="container-fluid event-container pt-4 pb-5 bg-dark">
    <p class="h2 fw-bold text-center">Upcoming @CategoryName Events</p>
    
    @if (UpcomingEvents?.Count > 0)
    {
        <div class="row">
            @foreach (var evt in UpcomingEvents)
            {
                <div class="col-lg-3 col-md-4 mb-3">
                    <div class="card bg-dark text-white border-secondary h-100">
                        <div class="img-container" style="height: 12rem; overflow: hidden;">
                            <img src="@evt.Image" class="card-img-top" alt="Event Image"
                                 style="width: 100%; height: 100%; object-fit: cover;">
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@evt.Title</h5>
                            <hr />
                            <p class="card-text flex-grow-1">
                                @(evt.ShortDescription.Length > 48 
                                    ? $"{evt.ShortDescription[..48]}..." 
                                    : evt.ShortDescription)
                            </p>
                            <small class="text-secondary">@evt.Country - @evt.StartDate</small>
                        </div>
                        <div class="card-footer bg-transparent border-secondary">
                            <div class="progress bg-black mb-2">
                                <div class="progress-bar progress-bar-striped progress-bar-animated bg-danger" 
                                     role="progressbar" 
                                     style="width: @(GetProgressWidth(evt))%;">
                                </div>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <small>Starts in @CalcUpcomingDays(evt.StartDate) days</small>
                                <a href="/event/details/@evt.Id" class="btn btn-outline-danger btn-sm">Details</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (UpcomingPagination.TotalNumberOfPages > 1)
        {
            <div class="d-flex justify-content-center gap-2 mt-3">
                <button class="btn btn-outline-light btn-sm @(UpcomingPagination.HasPreviousPage ? "" : "disabled")"
                        @onclick="() => LoadUpcomingEvents(CurrentUpcomingPage - 1)">
                    Previous
                </button>
                
                @for (int i = 1; i <= UpcomingPagination.TotalNumberOfPages; i++)
                {
                    var pageNumber = i;
                    <button class="btn btn-sm @(pageNumber == CurrentUpcomingPage ? "btn-danger" : "btn-outline-light")"
                            @onclick="() => LoadUpcomingEvents(pageNumber)">
                        @i
                    </button>
                }

                <button class="btn btn-outline-light btn-sm @(UpcomingPagination.HasNextPage ? "" : "disabled")"
                        @onclick="() => LoadUpcomingEvents(CurrentUpcomingPage + 1)">
                    Next
                </button>
            </div>
        }
    }
    else
    {
        <div class="text-center py-5">
            <h3>No upcoming events found.</h3>
        </div>
    }

    <hr class="my-5" />

    <div class="row mb-3">
        <div class="col-md-6">
            <h3 class="fw-bold">Other @CategoryName Events</h3>
        </div>
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control"
                       placeholder="Search events..."
                       @bind-value="SearchText"
                       @bind-value:event="oninput"
                       @onkeyup="HandleSearch" />
                <button class="btn btn-outline-light" @onclick="HandleSearch">
                    Search
                </button>
            </div>
        </div>
    </div>

    @if (OtherEvents?.Count > 0)
    {
        <div class="row">
            @foreach (var evt in OtherEvents)
            {
                <div class="col-lg-3 col-md-4 mb-3">
                    <div class="card bg-dark text-white border-secondary h-100">
                        <div class="img-container" style="height: 12rem; overflow: hidden;">
                            <img src="@evt.Image" class="card-img-top" alt="Event Image"
                                 style="width: 100%; height: 100%; object-fit: cover;">
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@evt.Title</h5>
                            <hr />
                            <p class="card-text flex-grow-1">
                                @(evt.ShortDescription.Length > 48 
                                    ? $"{evt.ShortDescription[..48]}..." 
                                    : evt.ShortDescription)
                            </p>
                            <small class="text-secondary">@evt.Country - @evt.StartDate</small>
                        </div>
                        <div class="card-footer bg-transparent border-secondary text-center">
                            <a href="/event/details/@evt.Id" class="btn btn-outline-danger btn-sm">Details</a>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (OtherPagination.TotalNumberOfPages > 1)
        {
            <div class="d-flex justify-content-center gap-2 mt-3">
                <button class="btn btn-outline-light btn-sm @(OtherPagination.HasPreviousPage ? "" : "disabled")"
                        @onclick="() => LoadOtherEvents(CurrentOtherPage - 1)">
                    Previous
                </button>
                
                @for (int i = 1; i <= OtherPagination.TotalNumberOfPages; i++)
                {
                    var pageNumber = i;
                    <button class="btn btn-sm @(pageNumber == CurrentOtherPage ? "btn-danger" : "btn-outline-light")"
                            @onclick="() => LoadOtherEvents(pageNumber)">
                        @i
                    </button>
                }

                <button class="btn btn-outline-light btn-sm @(OtherPagination.HasNextPage ? "" : "disabled")"
                        @onclick="() => LoadOtherEvents(CurrentOtherPage + 1)">
                    Next
                </button>
            </div>
        }
    }
    else
    {
        <div class="text-center py-5">
            <h3>No events found.</h3>
            <img src="imgs/eventnotfound.png" style="width:350px;" alt="No events found" />
        </div>
    }
</div>

@code {
    [Inject] private IEventService EventService { get; set; } = default!;
    [Parameter] public string? CategoryName { get; set; }

    private const int PageSize = 8;
    private string SearchText = "";
    
    private PaginatedList<Event> UpcomingPagination = default!;
    private PaginatedList<Event> OtherPagination = default!;
    private List<Event> UpcomingEvents = [];
    private List<Event> OtherEvents = [];
    private int CurrentUpcomingPage = 1;
    private int CurrentOtherPage = 1;

    protected override void OnParametersSet()
    {
        CategoryName ??= string.Empty;
        LoadUpcomingEvents(1);
        LoadOtherEvents(1);
    }

    private void LoadUpcomingEvents(int pageNumber)
    {
        var today = DateOnly.FromDateTime(DateTime.Now);
        var query = EventService.Events.Where(e => e.StartDate >= today);

        if (!string.IsNullOrEmpty(CategoryName))
        {
            if (Enum.TryParse(typeof(Category), CategoryName, true, out var category))
            {
                query = query.Where(e => e.Category.Equals((Category)category));
            }
        }

        var allUpcoming = query.OrderBy(e => e.StartDate).Take(12).ToList();
        var pagedItems = allUpcoming
            .Skip((pageNumber - 1) * PageSize)
            .Take(PageSize)
            .ToList();

        UpcomingPagination = new(pagedItems, allUpcoming.Count, pageNumber, PageSize);
        UpcomingEvents = pagedItems;
        CurrentUpcomingPage = pageNumber;
    }

    private void LoadOtherEvents(int pageNumber)
    {
        var today = DateOnly.FromDateTime(DateTime.Now);
        var query = EventService.Events.Where(e => e.StartDate >= today);

        if (!string.IsNullOrEmpty(CategoryName))
        {
            if (Enum.TryParse(typeof(Category), CategoryName, true, out var category))
            {
                query = query.Where(e => e.Category.Equals((Category)category));
            }
        }

        // Exclude upcoming events
        var upcomingIds = UpcomingEvents.Select(e => e.Id).ToList();
        query = query.Where(e => !upcomingIds.Contains(e.Id));

        // Apply search
        if (!string.IsNullOrEmpty(SearchText))
        {
            query = query.Where(e => 
                e.Title.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
                e.ShortDescription.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
                e.Country.Contains(SearchText, StringComparison.OrdinalIgnoreCase));
        }

        var allOther = query.ToList();
        var pagedItems = allOther
            .Skip((pageNumber - 1) * PageSize)
            .Take(PageSize)
            .ToList();

        OtherPagination = new(pagedItems, allOther.Count, pageNumber, PageSize);
        OtherEvents = pagedItems;
        CurrentOtherPage = pageNumber;
    }

    private async Task HandleSearch()
    {
        await Task.Delay(300); // Debounce
        LoadOtherEvents(1);
    }

    private int CalcUpcomingDays(DateOnly eventDate)
    {
        return (eventDate.ToDateTime(TimeOnly.MinValue) - DateTime.Now).Days;
    }

    private int GetProgressWidth(Event evt)
    {
        var daysUntilEvent = CalcUpcomingDays(evt.StartDate);
        var maxDays = UpcomingEvents.Max(e => CalcUpcomingDays(e.StartDate));
        return (int)((float)daysUntilEvent / maxDays * 100);
    }
}