@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@{
    var currentUser = await UserManager.GetUserAsync(User);
}

<div id="chat-widget" class="chat-widget">
    <div class="chat-header" onclick="toggleChat()">
        <i class="bi bi-chat-dots"></i> Chat Support
        <span class="badge bg-danger d-none" id="unread-badge">0</span>
    </div>
    <div class="chat-body" id="chat-body">
        <div id="messagesList" class="messages-list"></div>
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type a message..." />
            <button onclick="sendMessage()" class="btn btn-primary btn-sm">
                <i class="bi bi-send"></i>
            </button>
        </div>
    </div>
</div>

<style>
    .chat-widget {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 300px;
        z-index: 1000;
        background: white;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    .chat-header {
        padding: 10px 15px;
        background: #007bff;
        color: white;
        border-radius: 10px 10px 0 0;
        cursor: pointer;
    }

    .chat-body {
        display: none;
        height: 400px;
        border: 1px solid #ddd;
        border-top: none;
        border-radius: 0 0 10px 10px;
    }

    .messages-list {
        height: 350px;
        overflow-y: auto;
        padding: 10px;
    }

    .chat-input {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ddd;
    }

    .chat-input input {
        flex: 1;
        margin-right: 10px;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    .message {
        margin-bottom: 10px;
        padding: 8px 12px;
        border-radius: 15px;
        max-width: 80%;
    }

    .message-received {
        background: #f1f0f0;
        float: left;
    }

    .message-sent {
        background: #007bff;
        color: white;
        float: right;
    }

    .message-info {
        font-size: 0.8em;
        color: #666;
        clear: both;
        text-align: right;
    }
</style>

<script>
    @* let connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build(); *@

    // Use the existing connection from _Layout.cshtml
    let currentUser = "@currentUser?.UserName";
    let isAdmin = @Json.Serialize(User.IsInRole("Admin"));

    connection.on("ReceiveMessage", function (user, message) {
        let messageDiv = document.createElement("div");
        messageDiv.className = `message ${user === currentUser ? 'message-sent' : 'message-received'}`;
        messageDiv.textContent = message;

        let infoDiv = document.createElement("div");
        infoDiv.className = "message-info";
        infoDiv.textContent = user;

        let messagesList = document.getElementById("messagesList");
        messagesList.appendChild(messageDiv);
        messagesList.appendChild(infoDiv);
        messagesList.scrollTop = messagesList.scrollHeight;

        if (document.getElementById("chat-body").style.display === "none") {
            incrementUnreadBadge();
        }
    });

    connection.on("ReceivePrivateMessage", function (fromUser, message) {
        let messageDiv = document.createElement("div");
        messageDiv.className = 'message message-received';
        messageDiv.textContent = message;

        let infoDiv = document.createElement("div");
        infoDiv.className = "message-info";
        infoDiv.textContent = `Private from ${fromUser}`;

        let messagesList = document.getElementById("messagesList");
        messagesList.appendChild(messageDiv);
        messagesList.appendChild(infoDiv);
        messagesList.scrollTop = messagesList.scrollHeight;

        if (document.getElementById("chat-body").style.display === "none") {
            incrementUnreadBadge();
        }
    });

    if (isAdmin) {
        connection.invoke("JoinAdminGroup");
    }

    function sendMessage() {
        let messageInput = document.getElementById("messageInput");
        let message = messageInput.value;
        if (message.trim() !== "") {
            connection.invoke("SendMessage", currentUser, message).catch(function (err) {
                return console.error(err.toString());
            });
            messageInput.value = "";
        }
    }

    function toggleChat() {
        let chatBody = document.getElementById("chat-body");
        chatBody.style.display = chatBody.style.display === "none" ? "block" : "none";
        if (chatBody.style.display === "block") {
            resetUnreadBadge();
        }
    }

    function incrementUnreadBadge() {
        let badge = document.getElementById("unread-badge");
        badge.classList.remove("d-none");
        badge.textContent = (parseInt(badge.textContent) + 1).toString();
    }

    function resetUnreadBadge() {
        let badge = document.getElementById("unread-badge");
        badge.classList.add("d-none");
        badge.textContent = "0";
    }

    document.getElementById("messageInput").addEventListener("keypress", function(event) {
        if (event.key === "Enter") {
            sendMessage();
        }
    });
</script>